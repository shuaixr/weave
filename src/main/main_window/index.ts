import { BrowserWindow, ipcMain } from "electron";
import { TaskListIpc } from "../../share/ipcChannel";
import { TaskType } from "../../share/TaskType";
import { Task } from "./task";
import { TcpClientTask } from "./task/TcpClient";

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

export class MainWindow {
  window: BrowserWindow;
  taskMap: Map<string, Task>;
  constructor() {
    this.taskMap = new Map();
    this.window = new BrowserWindow({
      height: 600,
      width: 800,
      webPreferences: {
        preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      },
    });

    // and load the index.html of the app.
    this.window.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

    // Open the DevTools.
    this.window.webContents.openDevTools();

    //Init ipc
    ipcMain.handle(TaskListIpc.ADD_TASK, (event, id: string, type: string) => {
      let newTask: Task;
      switch (type) {
        case TaskType.TCP_CLIENT:
          newTask = new TcpClientTask(this.window, id);
          break;
      }
      this.taskMap.set(id, newTask);
    });
  }
}
